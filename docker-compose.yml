version: '3.8'

services:
  # NVIDIA Trellis NIM Container
  trellis-nim:
    image: nvcr.io/nim/microsoft/trellis:1.0.0
    container_name: trellis-nim
    runtime: nvidia
    environment:
      # """
      # Insert API Credentials here
      # Replace with your actual NVIDIA API key
      # """
      - NVIDIA_API_KEY=${NVIDIA_API_KEY}
      - NIM_CACHE_PATH=/opt/nim/.cache
      - NIM_SERVER_PORT=8080
      - CUDA_VISIBLE_DEVICES=0
    ports:
      - "8080:8080"
    volumes:
      - nim_cache:/opt/nim/.cache
      - ./trellis_nim_logs:/var/log/nim
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: unless-stopped
    networks:
      - trellis-network

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: trellis-backend
    environment:
      - NODE_ENV=production
      - PORT=3001
      - TRELLIS_NIM_URL=http://trellis-nim:8080
      # """
      # Insert API Credentials here
      # The TRELLIS_NIM_API_KEY should match the NVIDIA_API_KEY above
      # """
      - TRELLIS_NIM_API_KEY=${NVIDIA_API_KEY}
      - FRONTEND_URL=http://localhost:5173
      - LOG_LEVEL=info
    ports:
      - "3001:3001"
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    depends_on:
      trellis-nim:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - trellis-network

  # Frontend (Development Mode)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: trellis-frontend
    environment:
      - VITE_BACKEND_URL=http://localhost:3001
    ports:
      - "5173:5173"
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - trellis-network

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: trellis-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - trellis-network
    profiles: ["production"]

volumes:
  nim_cache:
    driver: local

networks:
  trellis-network:
    driver: bridge
